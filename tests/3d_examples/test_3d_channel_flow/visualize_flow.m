%% visualize_flow.m - animated post-processing for 3D channel flow
% -------------------------------------------------------------------------
% 1. Load flow_data.mat generated by preprocess_data.m
% 2. Animate particle cloud, wall-normal profile, and centerline history
% 3. Export MP4 video + final snapshot PNG
% ----------------------------------=---------------------------------------

clc; clear; close all;

data_file = 'flow_data.mat';
if ~isfile(data_file)
    error('flow_data.mat not found. Run preprocess_data.m first.');
end

load(data_file, 'flow_data', 'observer', 'analysis', 'config');

if isfield(config, 'flow_direction_body')
    flow_direction = config.flow_direction_body;
elseif isfield(config, 'flow_direction')
    flow_direction = config.flow_direction;
else
    flow_direction = sign(config.U_max);
    if flow_direction == 0
        flow_direction = 1.0;
    end
end

if isfield(config, 'U_bulk')
    U_bulk_mag = abs(config.U_bulk);
else
    U_bulk_mag = 1.0;
end

velocity_extent = 1.6 * U_bulk_mag;

num_flow_frames = numel(flow_data);
num_wall_frames = size(observer.wall_normal.velocity, 1);
num_center_frames = size(observer.centerline.velocity, 1);
num_frames = min([num_flow_frames, num_wall_frames, num_center_frames]);

if num_frames == 0
    error('No frames available for animation.');
end

fprintf('Animating %d frames (flow=%d, wall=%d, center=%d).\n', ...
    num_frames, num_flow_frames, num_wall_frames, num_center_frames);

%% Particle subsampling for visualization
max_points = 30000;
num_particles = size(flow_data(1).position, 1);
if num_particles > max_points
    rng(42); % reproducible subsample
    sample_idx = randperm(num_particles, max_points);
else
    sample_idx = 1:num_particles;
end
sample_count = numel(sample_idx);

%% Extract observer data (already trimmed in preprocess_data)
wall_times = observer.wall_normal.time(1:num_frames);
wall_velocity_series = squeeze(observer.wall_normal.velocity(1:num_frames, :, 1));
y_coords = observer.wall_normal.positions(:, 2);
theory_profile = analysis.wall_normal_profile.u_theory;

center_times = observer.centerline.time(1:num_frames);
center_mid_idx = ceil(size(observer.centerline.positions, 1) / 2);
center_velocity_series = squeeze(observer.centerline.velocity(1:num_frames, center_mid_idx, 1));

%% Figure setup
fig = figure('Name', '3D Channel Flow Post-processing', ...
    'Position', [100, 100, 1600, 600], 'Color', 'w');

% Left: particle cloud
ax1 = subplot(1, 3, 1);
scatter_handle = scatter3(ax1, nan(sample_count, 1), nan(sample_count, 1), ...
    nan(sample_count, 1), 8, nan(sample_count, 1), 'filled');
axis(ax1, 'equal');
grid(ax1, 'on');
box(ax1, 'on');
view(ax1, [-55, 25]);
ax1.CameraUpVector = [0 1 0];
colormap(ax1, 'turbo');
c = colorbar(ax1);
c.Label.String = 'Velocity U_x (m/s)';
xlabel(ax1, 'X');
ylabel(ax1, 'Y');
zlabel(ax1, 'Z');
caxis(ax1, [-velocity_extent, velocity_extent]);
title(ax1, 'Particle cloud');

% Middle: wall-normal profile
ax2 = subplot(1, 3, 2);
plot(ax2, y_coords, theory_profile, 'r--', 'LineWidth', 2, 'DisplayName', 'Analytical');
hold(ax2, 'on');
wall_line = plot(ax2, y_coords, zeros(size(y_coords)), 'bo-', ...
    'LineWidth', 1.2, 'MarkerSize', 4, 'DisplayName', 'Simulation');
grid(ax2, 'on');
box(ax2, 'on');
xlabel(ax2, 'Y position (m)');
ylabel(ax2, 'U_x (m/s)');
title(ax2, 'Wall-normal Poiseuille profile');
legend(ax2, 'Location', 'best');
profile_ylim = [min([theory_profile(:); wall_velocity_series(:)]) - 0.1 * U_bulk_mag, ...
                max([theory_profile(:); wall_velocity_series(:)]) + 0.1 * U_bulk_mag];
ylim(ax2, profile_ylim);
rms_text = text(ax2, min(y_coords) + 0.05, profile_ylim(2) - 0.1 * U_bulk_mag, ...
    'RMS = --', 'BackgroundColor', 'w', 'EdgeColor', 'k');

% Right: centreline midpoint velocity history
ax3 = subplot(1, 3, 3);
plot(ax3, center_times, center_velocity_series, 'Color', [0.8 0.8 0.8], ...
    'LineStyle', '--', 'LineWidth', 1);
hold(ax3, 'on');
history_line = plot(ax3, center_times(1), center_velocity_series(1), ...
    'b-', 'LineWidth', 1.8);
grid(ax3, 'on');
box(ax3, 'on');
xlabel(ax3, 'Time (s)');
ylabel(ax3, 'U_x (m/s)');
title(ax3, 'Centerline midpoint velocity history');
ylim(ax3, [min([-velocity_extent, velocity_extent]), max([-velocity_extent, velocity_extent])]);

%% Video writer
out_dir = ensure_output_dir();
video_path = fullfile(out_dir, 'channel_flow_animation.mp4');
vw = VideoWriter(video_path, 'MPEG-4');
vw.FrameRate = min(20, max(3, floor(num_frames / 3)));
open(vw);

fprintf('Writing animation to %s\n', video_path);

for i = 1:num_frames
    state = flow_data(i);
    if size(state.position, 1) < sample_idx(end)
        error('Frame %d has fewer particles than expected.', i);
    end

    pos = state.position(sample_idx, :);
    vel = state.velocity(sample_idx, 1);

    set(scatter_handle, 'XData', pos(:, 1), 'YData', pos(:, 2), ...
        'ZData', pos(:, 3), 'CData', vel);
    title(ax1, sprintf('Particle cloud (t = %.3f s)', state.time));

    wall_profile = wall_velocity_series(i, :).';
    set(wall_line, 'YData', wall_profile);
    current_rms = sqrt(mean((wall_profile - theory_profile).^2));
    rms_text.String = sprintf('RMS = %.4f', current_rms);

    set(history_line, 'XData', center_times(1:i), 'YData', center_velocity_series(1:i));

    drawnow;
    frame = getframe(fig);
    writeVideo(vw, frame);

    if mod(i, max(1, floor(num_frames / 5))) == 0 || i == num_frames
        fprintf('  processed %d / %d frames\n', i, num_frames);
    end
end

close(vw);
fprintf('Animation saved.\n');

%% Final snapshot (last frame already on screen)
snapshot_path = fullfile(out_dir, 'postprocess_summary.png');
exportgraphics(fig, snapshot_path, 'Resolution', 300);
fprintf('Final snapshot saved to %s\n', snapshot_path);

%% ------------------------------------------------------------------------
function out_dir = ensure_output_dir()
    out_dir = 'output';
    if ~isfolder(out_dir)
        mkdir(out_dir);
    end
end
